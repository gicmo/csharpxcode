/*
	MonoCompilerSpecificationCS.m - CSharp plugin
 
	Based heavily on:
	MACompilerSpecificationGNAT.h - AdaPlugin
	Copyright 2006 Damien Bobillot.
	Distributed under the GPL licence.
*/

#import "MonoCompilerSpecificationCS.h"
#import "XCPBuildSystem.h"
#import "XCPDependencyGraph.h"
#import "XCPSupport.h"


@implementation MonoCompilerSpecificationCS
- (NSArray*) computeDependenciesForInputFile:(NSString*)input 
									  ofType:(PBXFileType*)type 
									 variant:(NSString*)variant 
								architecture:(NSString*)arch 
							 outputDirectory:(NSString*)outputDir 
						inTargetBuildContext:(PBXTargetBuildContext*)context
{
//	FILE* CSDumpFile = fopen( "/Users/susan/CSDumpFile.txt", "a");
//	fprintf( CSDumpFile, "In Compiler\n");
	
	// compute input path (with variable substitution) and create the input node
	input = [context expandedValueForString:input];
	XCDependencyNode* inputNode = [context dependencyNodeForName:input createIfNeeded:YES];

	// Get the product node
	NSString* ProductPath = [context expandedValueForString:@"$(TARGET_BUILD_DIR)/$(EXECUTABLE_PATH)"];
	XCDependencyNode* productNode = [context dependencyNodeForName:ProductPath];
	XCDependencyCommand* depLink;
	
	if( nil == productNode)
	{
//		fprintf( CSDumpFile, "  Creating compiler command...\n");
		
		// Create the product node and set it up for the compile
		productNode = [context dependencyNodeForName:ProductPath createIfNeeded:YES];
		[context addProductNode:productNode];

		NSString* CompilerVersion = [context expandedValueForString:@"$(CS_DOTNETVERSION)"];
		NSString* CompilerPath = @"/usr/bin/gmcs";
		if( [CompilerVersion isEqualToString:@"V1"])
		{ CompilerPath = @"/usr/bin/mcs"; }
		
		// create linker command
		depLink = [context
		createCommandWithRuleInfo:[NSArray arrayWithObjects:@"Mono Compile",[context naturalPathForPath:ProductPath],nil]
					  commandPath:CompilerPath
						arguments:nil
						  forNode:productNode];
		[depLink setToolSpecification:self];
		
		// add in the compiler option flags
		NSArray* CmdLineArgs = [self commandLineForAutogeneratedOptionsInTargetBuildContext:context];
		[depLink addArgumentsFromArray:CmdLineArgs];
		
//		fprintf( CSDumpFile, "  Created compiler command\n");
	}
	else
	{ depLink = [productNode producerCommand]; }
	
//	fprintf( CSDumpFile, "  Input File: %s - Product Node: %s\n", [input cString], [ProductPath cString]);
	
	// Add the input node as an argument and dependency node for the product
	[depLink addArgument:input];
	[productNode addDependedNode:inputNode];
	[context setCompiledFilePath:ProductPath forSourceFilePath:input];
	
	NSString* object_files = [context expandedValueForString:@"object_files"];
	[context appendStringOrStringListValue:input toDynamicSetting:object_files];
	
//	[context writeToGraphVizFileAtPath:@"/Users/susan/DumpDependency.dot"];
//	fprintf( CSDumpFile, "--- Completed Compile\n");
//	fclose( CSDumpFile);
	
	// return the product node (as an array of one element)
	return [NSArray arrayWithObject:productNode];
}
@end

