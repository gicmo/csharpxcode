//
// CSharp BuildSteeings
// English localisation
//

"Name" = "CSharp Build Settings";
"Description" = "CSharp Options";

// options

"[OTHER_CSHARPFLAGS]-name" = "Other CSharp Flags";
"[OTHER_CSHARPFLAGS]-description" = "Not all compiler options that (g)mcs can accept are made available directly through these option settings. Compiler options in this category typically include those related to debugging the compiler (e.g. --fatal, --parse, --stacktrace, -timestamp and -v).
This option is required for the --expect-error option as this option takes 2 parameters and this is not possible with the current version of XCode.
Another option that cannot be passed is -recurse: however this option does not make sense when used within the XCode environment.
[OTHER_CSHARPFLAGS]";

"[CS_ADDMODULE]-name" = "Add Modules";
"[CS_ADDMODULE]-description" = "(--addmodule)
Includes the specified modules in the resulting assembly.
Each module to be added should be listed on a separate line.
[CS_ADDMODULE]";

"[CS_CHECKED]-name" = "Use Checked Expressions";
"[CS_CHECKED]-description" = "(-checked+|-checked-)
Specifies that all maths operations should be checked for exceptions. Performing such checking is set by default.
[CS_CHECKED]";

"[CS_CODEPAGE]-name" = "Code Page";
"[CS_CODEPAGE]-description" = "(-codepage)
Specifies the code page to process the input files. By default, files will be processed in the Latin-1 code page. The compiler will automatically detect Unicode files that have an embedded byte mark at the beginning.
This option applies to ALL source code files within the build. (This varies from the use of the -codepage within the mcs command line where it applies only to those input files that follow it - such usage is not available under XCode).
Options are:
- utf-8 (codepage 65001)
- Latin1 (codepage 28591)
- reset (use automatic processing rules)
[CS_CODEPAGE]";

"[CS_DEFINE]-name" = "Define Symbols";
"[CS_DEFINE]-description" = "(-define)
Defines symbols that can be tested in the source code by the preprocessor, or can be used by methods that have been tagged with the Conditional attribute.
Multiple symbols can be defined.
[CS_DEFINE]";

"[CS_DEBUG]-name" = "Generate debug information";
"[CS_DEBUG]-description" = "(-debug+)
Generate debugging information. To obtain stack traces with debugging nformation, you need to invoke the Mono runtime with the '--debug' flag. This debugging information is stored inside the assembly as a resource.
The default is to not generate the debugging information.
[CS_DEBUG]";

"[CS_DELAYSIGNING]-name" = "Delay Signing";
"[CS_DELAYSIGNING]-description" = "(-delaysign+)
Only embed the strongname public key into the assembly. The actual signing must be done in a later stage using the SN tool. This is useful to protect the private key during development. Note that delay signing can only be done using a strongname key file (not a key container). 
The option is equivalent to including [assembly: AssemblyDelaySign(true)] in your source code. This option takes precedence over the source file attribute.
[CS_DELAYSIGNING]";

"[CS_DOC]-name" = "Extract Documentation to file";
"[CS_DOC]-description" = "(-doc)
Extracts the C#/XML documentation from the source code and stores it in the specified file.
[CS_DOC]";

"[CS_KEYFILE]-name" = "Specify Key file";
"[CS_KEYFILE]-description" = "(-keyfile)
Strongname (sign) the output assembly using the key pair present in the specified strong name key file (snk). A full key pair is required be default (or when using -delaysign-). A file containing on the public key can be used with -delaysign+.
The option is equivalent to including [assembly: AssemblyKeyFile(\"KEY-FILE\")] in your source code. This compiler option takes precedence over the source file attribute.
[CS_KEYFILE]";

"[CS_KEYCONTAINER]-name" = "Specify Key container";
"[CS_KEYCONTAINER]-description" = "(-keycontainer)
Strongname (sign) the output assembly using the key pair present in the specified container. Note that -delaysign+ is ignored when using key containers.
The option is equivalent to including [assembly: AssemblyKeyName(\"CONTAINER\")] in your source code. This compiler option takes precedence over the attribute.
[CS_KEYCONTAINER]";

"[CS_LANGUAGE]-name" = "Specify Language";
"[CS_LANGUAGE]-description" = "(-langversion)
This option specifies the version of the language to use. The feature set is different in each C# version. This switch can be used to force the compiler to allow only a subset of the features. The possible values are:
- Default (or blank) - instructs the compiler to use the latest version
- ISO-1 - restrict the compiler to use only ISO standardised features. The usage of features such as generics, static classes, anonymous methods will lead to an error.
Note: this flag only controls the language features available to the programmer; it does NOT control the kind of assemblies produced.
[CS_LANGUAGE]";

"[CS_LIBRARIES]-name" = "Library Paths";
"[CS_LIBRARIES]-description" = "(-lib)
Each path specifies where the compiler is to look for libraries.
[CS_LIBRARIES]";

"[CS_MAINCLASS]-name" = "Main Class";
"[CS_MAINCLASS]-description" = "(-main)
Tells the compiler that the CLASS name entered contains the entry point.
This is useful when you are compiling several classes with a Main method.
[CS_MAINCLASS]";

"[CS_NOCONFIG]-name" = "Disable Default Configuration";
"[CS_NOCONFIG]-description" = "(-noconfig+)
Selecting this option disables the loading of the default compiler configuration. The compiler by default has references to the system assemblies.
[CS_NOCONFIG]";


"[CS_NOWARNINGS]-name" = "Ignore Specified Warnings";
"[CS_NOWARNINGS]-description" = "(-nowarn)
Makes the compiler ignore the specified warnings. The warnings are identified by their numerical value.
[CS_NOWARNINGS]";

"[CS_OPTIMISE]-name" = "Perform Optimisations";
"[CS_OPTIMISE]-description" = "(-optimize+)
Controls whether to perform optimisations on the code. The default is to optimise.
[CS_OPTIMISE]";

"[CS_PKGCONFIG]-name" = "Use Pkg-Config";
"[CS_PKGCONFIG]-description" = "(-pkg)
The compiler will invoke the 'pkg-config --libs' on the set of packages specified to obtain libraries and directories to compile the code.
A special package of 'dotnet' can be entered. Ths will instruct the compiler to reference the System.* libraries available on a typical dotnet framework installation. Note that this does not incloude all of the Mono libraries, only the System.* ones; this is a convenient shortcut for those porting code.
[CS_PKGCONFIG]";

"[CS_RESOURCE]-name" = "Embed Resource File(s)";
"[CS_RESOURCE]-description" = "(-resource)
Embeds the specified resource file(s) into the assembly. If the entered filename is followed by a \",ID\" value, the ID will be used to give a different name to the resource. Otherwise the filename will be the resource name.
[CS_RESOURCE]";

"[CS_LINKRESOURCE]-name" = "Link Resource File(s)";
"[CS_LINKRESOURCE]-description" = "(-linkresource)
Links the specified resource file(s) frm the assembly. If the filename is followed by a \",ID\" value, the ID will be used as the name of the resource; otherwise the filename will be used.
[CS_LINKRESOURCE]";

"[CS_REFERENCEDASSEMBLIES]-name" = "Reference Assemblies";
"[CS_REFERENCEDASSEMBLIES]-description" = "(-r)
Reference the named assemblies. Use this to use the classes fom the named assembly in your program. The assembly will be loaded from either the system directory where all assemblies live, or from the path explicitly given with the 'Library Paths' option.
Multiple assemblies can be listed.
Typically you do not need to list assemblies that are created within the same project from different targets. Simply drag the library assembly into the 'Link Binary with Libraries' target phase and they will be included in building this target.
[CS_REFERENCEDASSEMBLIES]";

"[CS_UNSAFE]-name" = "Allow Unsafe Code";
"[CS_UNSAFE]-description" = "(-unsafe+)
Enables compilation of unsafe code.
[CS_UNSAFE]";

"[CS_WARNASERROR]-name" = "Treat Warnings As Errors";
"[CS_WARNASERROR]-description" = "(-warnaserror+)
Treats all warnings as errors.
[CS_WARNASERROR]";

"[CS_WARNINGLEVEL]-name" = "Warning Level";
"[CS_WARNINGLEVEL]-description" = "(-warn)
Sets the warning level. 0 is the lowest warning level and 4 is the highest. The default is 2.
[CS_WARNINGLEVEL]";

"[CS_DOTNETVERSION]-name" = ".NET Version";
"[CS_DOTNETVERSION]-description" = "Selects the .NET version to be used via selection of the compiler version. The possible values are:
- V1 - .NET versions V1.0 and V1.1. (uses the mcs compiler)
- V2 - .NET version V2 (uses the gmcs compiler)
Note: the 'mcs' compiler selected using the V1 option links against the V1.x assemblies although it actually allows the use of C# V2.0 features except generics and nullable types. The 'gmcs' compiler links against the V2.x assemblies and implements the complete C# 2.0 specification.
[CS_DOTNETVERSION]";
